#!/usr/bin/env python
from optparse import OptionParser
import ConfigParser
import logging
import pprint
import uuid
import sys
import os
import re

from mifcholib.cm import ConnectionManager
from mifcholib.utils import urlparse, ORCHESTRATION_REGEX
from mifcholib.peer_info import PeerInfo

def main():
  
  # Get command-line options
  parser = OptionParser()
  parser.add_option("-c", "--config", dest="config", default='etc/services.conf',
                    help="Configuration File", metavar="FILE")
  
  parser.add_option("-i", "--identifier", dest="id", default='1234',
                    help="Instance Identifier")
  
  parser.add_option("-p", "--peers", dest="peers", default='',
                    help="Mifcho Peers", metavar="LIST")  
  
  parser.add_option("-l", "--log", dest="log", default='var/log/mifcho.log',
                    help="Log File", metavar="FILE")
  
  parser.add_option("-v", "--log-level", dest="log_level", default='DEBUG',
                    help="Log Level (CRITICAL,ERROR,WARNING,INFO,DEBUG,NOTSET)", metavar="STRING")
  
  (options, args) = parser.parse_args()
  
  LEVELS = {'debug':    logging.DEBUG,
            'info':     logging.INFO,
            'warning':  logging.WARNING,
            'error':    logging.ERROR,
            'critical': logging.CRITICAL}
  
  # Setup logging
  logging.basicConfig(filename=options.log,
                      level=LEVELS[options.log_level.lower()],
                      format='%(asctime)s,%(msecs)d %(levelname)s %(threadName)s %(message)s',
                      datefmt='%H:%M:%S')
  
  options.mifcho_path = os.path.dirname(os.path.realpath(sys.argv[0]))
  options.cert_path   = options.mifcho_path + os.sep + 'certs' + os.sep
  
  config = ConfigParser.RawConfigParser()     # Get config-file object
  config.read(options.config)
  
  peers = set()
    
  if options.peers:                           # Get peers from  command-line
    peers_urls = options.peers.split(",")
    for purl in (urlparse(purl) for purl in peers_urls):
      peers.add((purl['hostname'], int(purl['port']), purl['path'], purl['scheme'] in ['tls', 'https']))
    
  if config.has_option('General', 'peers') and \
    config.get('General', 'peers'):           # Get peers from config-file
    for purl in (urlparse(u) for u in config.get('General', 'peers').split('\n') if u):
      peers.add((purl['hostname'], int(purl['port']), purl['path'], purl['scheme'] in ['tls', 'https']))

  options.peers = [PeerInfo(None, None, iface) for iface in peers]
  
  options.handler_params = {}                 # Get handler parameters
  for section in (s for s in config.sections() if s != 'General'):
    options.handler_params[section] = dict(config.items(section))
  
  bind_addresses = []         # Get bind-addreses from config-file on the format:
  if config.has_option('General', 'bind') and config.get('General', 'bind'):
    bind_addresses = [urlparse(x) for x in config.get('General', 'bind').split('\n') if x]

  options.bind_addresses = bind_addresses
  
  # Get orchestration
  # Input looks something like:
  #
  # 8000 http /hobs HobsHandler
  # 8002 tcp  TCPTunnelingHandler forward to safl.dk:80 via 1234
  #
  # Transform to:
  #
  # [{
  #  'forward_via': None,
  #  'protocol': 'http',
  #  'forward_to': None,
  #  'dispatch_arg': '/hobs',
  #  'handler': 'HobsHandler',
  #  'port': '8000'
  # },{
  #  'forward_via': ' via 1234',
  #  'protocol': 'tcp',
  #  'forward_to': ' forward to safl.dk:80 via 1234',
  #  'dispatch_arg': '/None',
  #  'handler': 'TCPTunnelingHandler',
  #  'port': '8002'
  # }]
  #
  orchestration = []
  if config.has_option('General', 'orchestration') and config.get('General', 'orchestration'):
    for m in ORCHESTRATION_REGEX.finditer(config.get('General', 'orchestration')):
      orchestration.append(m.groupdict())
  
  options.orchestration = orchestration
  
  # Setup connectionmanager MIFCHO!
  logging.info('Starting...')
  conn_man = ConnectionManager(options)
  conn_man.start()
  logging.info('Started.')
  
  while conn_man.running:
    try:
      i=raw_input()
      if i in ['q','e','c']:
        logging.info('Exiting..')
        conn_man.stop()
        break
    except KeyboardInterrupt:
      conn_man.stop()
      break

if __name__ == "__main__":
  sys.exit(main())